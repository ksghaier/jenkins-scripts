def lnx_build
def uboot_build
def buildroot_build

pipeline {
    agent any

    environment {
        ARCH='arm'
        CROSS_COMPILE='arm-linux-gnueabihf-'
        UBOOT_CONFIG='zynq_z_turn_defconfig'
        UBOOT_BRANCH='refs/remotes/upstream/master'
        UBOOT_BRANCH_TO_REBASE='refs/remotes/xroumegue/zynq-zturn'
        UBOOT_ARTIFACTS='spl/boot.bin, spl/u-boot-spl.dtb, u-boot.img, u-boot.bin'
        LINUX_CONFIG='multi_v7_defconfig'
        LINUX_UIMAGE_LOADADDR='0x8000'
        LINUX_BRANCH='refs/remotes/upstream/master'
        LINUX_ARTIFACTS='arch/arm/boot/dts/zynq-zturn.dtb, arch/arm/boot/zImage, arch/arm/boot/uImage'
        BUILDROOT_ARTIFACTS='output/images/rootfs.cpio.uboot'
        BUILDROOT_CONFIG='zynq_zturn_ramdisk_defconfig'
        BUILDROOT_BRANCH='refs/remotes/upstream/master'
        BUILDROOT_BRANCH_TO_REBASE='refs/remotes/xroumegue/zynq-zturn'
    }

    options {
            buildDiscarder(
                logRotator(
                    artifactDaysToKeepStr: '7',
                    artifactNumToKeepStr: '30',
                    daysToKeepStr: '30',
                    numToKeepStr: '100'
                )
            )
            disableConcurrentBuilds()
    }

    triggers {
        cron('H */12 * * *')
    }

    stages {
        stage('uboot') {
            steps {
                script {
                    uboot_build = build(
                        job: 'uboot',
                        parameters : [
                            string(name: 'ARCH', value: env.ARCH),
                            string(name: 'CROSS_COMPILE', value: env.CROSS_COMPILE),
                            string(name:'CONFIG', value: env.UBOOT_CONFIG),
                            string(name:'BRANCH', value: env.UBOOT_BRANCH),
                            string(name:'BRANCH_TO_REBASE', value: env.UBOOT_BRANCH_TO_REBASE),
                            string(name:'ARTIFACTS', value: env.UBOOT_ARTIFACTS)
                        ]
                    )
                }
            }
        }
        stage('linux') {
            steps {
                script {
                    lnx_build = build(
                        job: 'linux',
                        parameters : [
                            string(name: 'ARCH', value: env.ARCH),
                            string(name: 'CROSS_COMPILE', value: env.CROSS_COMPILE),
                            string(name:'CONFIG', value: env.LINUX_CONFIG),
                            string(name:'UIMAGE_LOADADDR', value: env.LINUX_UIMAGE_LOADADDR),
                            string(name:'BRANCH', value: env.LINUX_BRANCH),
                            string(name:'ARTIFACTS', value: env.LINUX_ARTIFACTS)
                        ]
                    )
                }
            }
        }
        stage('buildroot') {
            steps {
                script {
                    buildroot_build = build(
                        job: 'buildroot',
                        parameters : [
                            string(name: 'CONFIG', value: env.BUILDROOT_CONFIG),
                            string(name: 'BRANCH', value: env.BUILDROOT_BRANCH),
                            string(name: 'BRANCH_TO_REBASE', value: env.BUILDROOT_BRANCH_TO_REBASE),
                            string(name: 'ARTIFACTS', value: env.BUILDROOT_ARTIFACTS)
                        ]
                    )
                }
            }
        }
        stage('boot-tftp') {
            steps {
                build(
                    job: 'boot-tftp',
                    parameters : [
                        string(
                            name: 'PLATFORM',
                            value: 'zturn'
                        ),
                        string(
                            name: 'LINUX_JOB_ID',
                            value: lnx_build.getNumber().toString()
                        ),
                        string(
                            name: 'BUILDROOT_JOB_ID',
                            value: buildroot_build.getNumber().toString()
                        ),
                        string(
                            name: 'UBOOT_JOB_ID',
                            value: uboot_build.getNumber().toString()
                        ),
                    ]
                )
            }
        }
    }
}