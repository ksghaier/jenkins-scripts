pipeline {
    agent any

    environment {
        ARCH='arm'
        CROSS_COMPILE='arm-linux-gnueabihf-'
        UBOOT_CONFIG='zynq_z_turn_defconfig'
        UBOOT_BRANCH='refs/remotes/upstream/master'
        UBOOT_BRANCH_TO_REBASE='refs/remotes/xroumegue/zynq-zturn'
        UBOOT_ARTIFACTS='spl/boot.bin, spl/u-boot-spl.dtb, u-boot.img, u-boot.bin'
        LINUX_CONFIG='multi_v7_defconfig'
        LINUX_UIMAGE_LOADADDR='0x8000'
        LINUX_BRANCH='refs/remotes/upstream/master'
        LINUX_ARTIFACTS='arch/arm/boot/dts/zynq-zturn.dtb, arch/arm/boot/zImage'
    }

    options {
            buildDiscarder(
                logRotator(
                    artifactDaysToKeepStr: '7',
                    artifactNumToKeepStr: '30',
                    daysToKeepStr: '30',
                    numToKeepStr: '100'
                )
            )
            disableConcurrentBuilds()
    }

    triggers {
        cron('H */4 * * *')
    }

    stages {
        stage('uboot') {
            steps {
                build job: 'uboot', parameters : [
                    string(name: 'ARCH', value: env.ARCH),
                    string(name: 'CROSS_COMPILE', value: env.CROSS_COMPILE),
                    string(name:'CONFIG', value: env.UBOOT_CONFIG),
                    string(name:'BRANCH', value: env.UBOOT_BRANCH),
                    string(name:'BRANCH_TO_REBASE', value: env.UBOOT_BRANCH_TO_REBASE),
                    string(name:'ARTIFACTS', value: env.UBOOT_ARTIFACTS)
                ]
            }
        }
        stage('linux') {
            steps {
                script {
                def lnx_id = build(
                        job: 'linux',
                        parameters : [
                            string(name: 'ARCH', value: env.ARCH),
                            string(name: 'CROSS_COMPILE', value: env.CROSS_COMPILE),
                            string(name:'CONFIG', value: env.LINUX_CONFIG),
                            string(name:'UIMAGE_LOADADDR', value: env.LINUX_UIMAGE_LOADADDR),
                            string(name:'BRANCH', value: env.LINUX_BRANCH),
                            string(name:'ARTIFACTS', value: env.LINUX_ARTIFACTS)
                        ]
                    )
                echo lnx_id.getNumber().toString()
                }
            }
        }
    }
}